// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chains_query/pkg/grpc/pb/chains_query.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BitcoincoreBlockRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitcoincoreBlockRequest) Reset()         { *m = BitcoincoreBlockRequest{} }
func (m *BitcoincoreBlockRequest) String() string { return proto.CompactTextString(m) }
func (*BitcoincoreBlockRequest) ProtoMessage()    {}
func (*BitcoincoreBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_chains_query_fac696e82d0b8980, []int{0}
}
func (m *BitcoincoreBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitcoincoreBlockRequest.Unmarshal(m, b)
}
func (m *BitcoincoreBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitcoincoreBlockRequest.Marshal(b, m, deterministic)
}
func (dst *BitcoincoreBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoincoreBlockRequest.Merge(dst, src)
}
func (m *BitcoincoreBlockRequest) XXX_Size() int {
	return xxx_messageInfo_BitcoincoreBlockRequest.Size(m)
}
func (m *BitcoincoreBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoincoreBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoincoreBlockRequest proto.InternalMessageInfo

type BitcoincoreBlockReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitcoincoreBlockReply) Reset()         { *m = BitcoincoreBlockReply{} }
func (m *BitcoincoreBlockReply) String() string { return proto.CompactTextString(m) }
func (*BitcoincoreBlockReply) ProtoMessage()    {}
func (*BitcoincoreBlockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_chains_query_fac696e82d0b8980, []int{1}
}
func (m *BitcoincoreBlockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitcoincoreBlockReply.Unmarshal(m, b)
}
func (m *BitcoincoreBlockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitcoincoreBlockReply.Marshal(b, m, deterministic)
}
func (dst *BitcoincoreBlockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoincoreBlockReply.Merge(dst, src)
}
func (m *BitcoincoreBlockReply) XXX_Size() int {
	return xxx_messageInfo_BitcoincoreBlockReply.Size(m)
}
func (m *BitcoincoreBlockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoincoreBlockReply.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoincoreBlockReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BitcoincoreBlockRequest)(nil), "pb.BitcoincoreBlockRequest")
	proto.RegisterType((*BitcoincoreBlockReply)(nil), "pb.BitcoincoreBlockReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainsQueryClient is the client API for ChainsQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainsQueryClient interface {
	BitcoincoreBlock(ctx context.Context, in *BitcoincoreBlockRequest, opts ...grpc.CallOption) (*BitcoincoreBlockReply, error)
}

type chainsQueryClient struct {
	cc *grpc.ClientConn
}

func NewChainsQueryClient(cc *grpc.ClientConn) ChainsQueryClient {
	return &chainsQueryClient{cc}
}

func (c *chainsQueryClient) BitcoincoreBlock(ctx context.Context, in *BitcoincoreBlockRequest, opts ...grpc.CallOption) (*BitcoincoreBlockReply, error) {
	out := new(BitcoincoreBlockReply)
	err := c.cc.Invoke(ctx, "/pb.ChainsQuery/BitcoincoreBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainsQueryServer is the server API for ChainsQuery service.
type ChainsQueryServer interface {
	BitcoincoreBlock(context.Context, *BitcoincoreBlockRequest) (*BitcoincoreBlockReply, error)
}

func RegisterChainsQueryServer(s *grpc.Server, srv ChainsQueryServer) {
	s.RegisterService(&_ChainsQuery_serviceDesc, srv)
}

func _ChainsQuery_BitcoincoreBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BitcoincoreBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainsQueryServer).BitcoincoreBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainsQuery/BitcoincoreBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainsQueryServer).BitcoincoreBlock(ctx, req.(*BitcoincoreBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainsQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChainsQuery",
	HandlerType: (*ChainsQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BitcoincoreBlock",
			Handler:    _ChainsQuery_BitcoincoreBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chains_query/pkg/grpc/pb/chains_query.proto",
}

func init() {
	proto.RegisterFile("chains_query/pkg/grpc/pb/chains_query.proto", fileDescriptor_chains_query_fac696e82d0b8980)
}

var fileDescriptor_chains_query_fac696e82d0b8980 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0xce, 0x48, 0xcc,
	0xcc, 0x2b, 0x8e, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0xd4, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x2f, 0x2a,
	0x48, 0xd6, 0x2f, 0x48, 0xd2, 0x47, 0x96, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a,
	0x48, 0x52, 0x92, 0xe4, 0x12, 0x77, 0xca, 0x2c, 0x49, 0xce, 0xcf, 0xcc, 0x4b, 0xce, 0x2f, 0x4a,
	0x75, 0xca, 0xc9, 0x4f, 0xce, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x12, 0xe7, 0x12,
	0xc5, 0x94, 0x2a, 0xc8, 0xa9, 0x34, 0x8a, 0xe4, 0xe2, 0x76, 0x06, 0x9b, 0x16, 0x08, 0x32, 0x4c,
	0xc8, 0x8b, 0x4b, 0x00, 0x5d, 0x9d, 0x90, 0xb4, 0x5e, 0x41, 0x92, 0x1e, 0x0e, 0x83, 0xa5, 0x24,
	0xb1, 0x4b, 0x16, 0xe4, 0x54, 0x26, 0xb1, 0x81, 0x5d, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x16, 0xce, 0xf1, 0xea, 0xc8, 0x00, 0x00, 0x00,
}
