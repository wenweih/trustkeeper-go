// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "trustkeeper-go/app/service/wallet_management/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	GetChainsEndpoint                       endpoint.Endpoint
	CreateChainEndpoint                     endpoint.Endpoint
	AssignedXpubToGroupEndpoint             endpoint.Endpoint
	CreateWalletEndpoint                    endpoint.Endpoint
	GetWalletsEndpoint                      endpoint.Endpoint
	QueryWalletsForGroupByChainNameEndpoint endpoint.Endpoint
	QueryWalletHDEndpoint                   endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.WalletManagementService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AssignedXpubToGroupEndpoint:             MakeAssignedXpubToGroupEndpoint(s),
		CreateChainEndpoint:                     MakeCreateChainEndpoint(s),
		CreateWalletEndpoint:                    MakeCreateWalletEndpoint(s),
		GetChainsEndpoint:                       MakeGetChainsEndpoint(s),
		GetWalletsEndpoint:                      MakeGetWalletsEndpoint(s),
		QueryWalletHDEndpoint:                   MakeQueryWalletHDEndpoint(s),
		QueryWalletsForGroupByChainNameEndpoint: MakeQueryWalletsForGroupByChainNameEndpoint(s),
	}
	for _, m := range mdw["GetChains"] {
		eps.GetChainsEndpoint = m(eps.GetChainsEndpoint)
	}
	for _, m := range mdw["CreateChain"] {
		eps.CreateChainEndpoint = m(eps.CreateChainEndpoint)
	}
	for _, m := range mdw["AssignedXpubToGroup"] {
		eps.AssignedXpubToGroupEndpoint = m(eps.AssignedXpubToGroupEndpoint)
	}
	for _, m := range mdw["CreateWallet"] {
		eps.CreateWalletEndpoint = m(eps.CreateWalletEndpoint)
	}
	for _, m := range mdw["GetWallets"] {
		eps.GetWalletsEndpoint = m(eps.GetWalletsEndpoint)
	}
	for _, m := range mdw["QueryWalletsForGroupByChainName"] {
		eps.QueryWalletsForGroupByChainNameEndpoint = m(eps.QueryWalletsForGroupByChainNameEndpoint)
	}
	for _, m := range mdw["QueryWalletHD"] {
		eps.QueryWalletHDEndpoint = m(eps.QueryWalletHDEndpoint)
	}
	return eps
}
