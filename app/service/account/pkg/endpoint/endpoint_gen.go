// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	service "trustkeeper-go/app/service/account/pkg/service"

	endpoint "github.com/go-kit/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateEndpoint   endpoint.Endpoint
	SigninEndpoint   endpoint.Endpoint
	SignoutEndpoint  endpoint.Endpoint
	RolesEndpoint    endpoint.Endpoint
	UserInfoEndpoint endpoint.Endpoint
	AuthEndpoint     endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AccountService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AuthEndpoint:     MakeAuthEndpoint(s),
		CreateEndpoint:   MakeCreateEndpoint(s),
		RolesEndpoint:    MakeRolesEndpoint(s),
		SigninEndpoint:   MakeSigninEndpoint(s),
		SignoutEndpoint:  MakeSignoutEndpoint(s),
		UserInfoEndpoint: MakeUserInfoEndpoint(s),
	}
	for _, m := range mdw["Create"] {
		eps.CreateEndpoint = m(eps.CreateEndpoint)
	}
	for _, m := range mdw["Signin"] {
		eps.SigninEndpoint = m(eps.SigninEndpoint)
	}
	for _, m := range mdw["Signout"] {
		eps.SignoutEndpoint = m(eps.SignoutEndpoint)
	}
	for _, m := range mdw["Roles"] {
		eps.RolesEndpoint = m(eps.RolesEndpoint)
	}
	for _, m := range mdw["UserInfo"] {
		eps.UserInfoEndpoint = m(eps.UserInfoEndpoint)
	}
	for _, m := range mdw["Auth"] {
		eps.AuthEndpoint = m(eps.AuthEndpoint)
	}
	return eps
}
